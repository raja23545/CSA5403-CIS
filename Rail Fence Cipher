public class RailFenceCipher {
    public static String encrypt(String text, int numRails) {
        char[][] rail = new char[numRails][text.length()];
        for (int i = 0; i < numRails; i++) {
            for (int j = 0; j < text.length(); j++) {
                rail[i][j] = '\n'; // Fill with empty characters
            }
        }

        boolean goingDown = false;
        int row = 0, col = 0;
        for (int i = 0; i < text.length(); i++) {
            rail[row][col++] = text.charAt(i);
            if (row == 0 || row == numRails - 1) {
                goingDown = !goingDown;
            }
            row = goingDown ? row + 1 : row - 1;
        }

        StringBuilder encryptedText = new StringBuilder();
        for (int i = 0; i < numRails; i++) {
            for (int j = 0; j < text.length(); j++) {
                if (rail[i][j] != '\n') {
                    encryptedText.append(rail[i][j]);
                }
            }
        }
        return encryptedText.toString();
    }

    public static String decrypt(String cipherText, int numRails) {
        char[][] rail = new char[numRails][cipherText.length()];
        for (int i = 0; i < numRails; i++) {
            for (int j = 0; j < cipherText.length(); j++) {
                rail[i][j] = '\n';
            }
        }

        boolean goingDown = false;
        int row = 0, col = 0;
        for (int i = 0; i < cipherText.length(); i++) {
            rail[row][col++] = '*';
            if (row == 0 || row == numRails - 1) {
                goingDown = !goingDown;
            }
            row = goingDown ? row + 1 : row - 1;
        }

        int index = 0;
        for (int i = 0; i < numRails; i++) {
            for (int j = 0; j < cipherText.length(); j++) {
                if (rail[i][j] == '*' && index < cipherText.length()) {
                    rail[i][j] = cipherText.charAt(index++);
                }
            }
        }

        StringBuilder decryptedText = new StringBuilder();
        row = 0;
        col = 0;
        for (int i = 0; i < cipherText.length(); i++) {
            decryptedText.append(rail[row][col++]);
            if (row == 0 || row == numRails - 1) {
                goingDown = !goingDown;
            }
            row = goingDown ? row + 1 : row - 1;
        }

        return decryptedText.toString();
    }

    public static void main(String[] args) {
        String plaintext = "HELLOFROMRAILFENCE";
        int numRails = 3;
        
        String encrypted = encrypt(plaintext, numRails);
        String decrypted = decrypt(encrypted, numRails);

        System.out.println("Encrypted Text: " + encrypted);
        System.out.println("Decrypted Text: " + decrypted);
    }
}
