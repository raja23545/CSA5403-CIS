import java.util.*;

public class ColumnarTranspositionCipher {
    public static String encrypt(String text, String key) {
        int numColumns = key.length();
        int numRows = (int) Math.ceil((double) text.length() / numColumns);

        // Create an empty grid
        char[][] grid = new char[numRows][numColumns];
        int index = 0;

        // Fill grid with characters from plaintext
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numColumns; j++) {
                if (index < text.length()) {
                    grid[i][j] = text.charAt(index++);
                } else {
                    grid[i][j] = 'X'; // Padding with 'X' if needed
                }
            }
        }

        // Order the columns based on the key
        List<Integer> keyOrder = getKeyOrder(key);

        // Create the ciphertext by reading the columns in the order specified by the key
        StringBuilder encryptedText = new StringBuilder();
        for (int k : keyOrder) {
            for (int i = 0; i < numRows; i++) {
                encryptedText.append(grid[i][k]);
            }
        }

        return encryptedText.toString();
    }

    public static String decrypt(String cipherText, String key) {
        int numColumns = key.length();
        int numRows = cipherText.length() / numColumns;
        char[][] grid = new char[numRows][numColumns];

        // Order the columns based on the key
        List<Integer> keyOrder = getKeyOrder(key);

        // Fill the grid with the cipher text
        int index = 0;
        for (int k : keyOrder) {
            for (int i = 0; i < numRows; i++) {
                grid[i][k] = cipherText.charAt(index++);
            }
        }

        // Read the grid row by row to get the decrypted text
        StringBuilder decryptedText = new StringBuilder();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numColumns; j++) {
                decryptedText.append(grid[i][j]);
            }
        }

        return decryptedText.toString().replaceAll("X$", ""); // Remove any padding characters
    }

    private static List<Integer> getKeyOrder(String key) {
        List<Integer> keyOrder = new ArrayList<>();
        for (int i = 0; i < key.length(); i++) {
            keyOrder.add(i);
        }
        keyOrder.sort(Comparator.comparingInt(i -> key.charAt(i)));
        return keyOrder;
    }

    public static void main(String[] args) {
        String plaintext = "HELLOFROMCOLUMNAR";
        String key = "KEY";

        String encrypted = encrypt(plaintext, key);
        String decrypted = decrypt(encrypted, key);

        System.out.println("Encrypted Text: " + encrypted);
        System.out.println("Decrypted Text: " + decrypted);
    }
}
